parameters:
  workingDirectory: ''

jobs:
- job: deployinfra
  displayName: 'Deploy Infrastructure'

  steps:
  - checkout: self
    clean: true
    persistCredentials: true

  # Print out some pipeline details for troubleshooting and debugging
  - task: Bash@3
    displayName: 'Pipeline Details'
    inputs:
      targetType: 'inline'
      script: |
        echo "Infrastructure Pipeline Deployment Details"
        echo "* Service Connection: $(azureServiceConnection)"
        echo "* Terraform Version: $(tfVersion)"
        echo "* Target Location: $(location)"

  # Build Agent - Install Terraform tooling
  - task: TerraformInstaller@0
    displayName: 'Install Terraform Tooling $(tfVersion) (Build Agent)'
    inputs:
      terraformVersion: '$(tfVersion)' # Terraform Version (specified in DevOps VG)
    enabled: true

  # Initialize Terraform
  - task: TerraformTaskV1@0
    displayName: 'Terraform Init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: '$(azureServiceConnection)'
      backendAzureRmResourceGroupName: '$(tfResourceGroup)'
      backendAzureRmStorageAccountName: '$(tfStorageAccount)'
      backendAzureRmContainerName: '$(tfContainerName)'
      backendAzureRmKey: '$(tfKey)'
      workingDirectory: '${{ parameters.workingDirectory }}'
    env:
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

  # Validate Terraform Code
  - task: TerraformTaskV1@0
    displayName: 'Terraform Validate'
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: '${{ parameters.workingDirectory }}'
    env:
      TF_VAR_location: '$(location)'
      TF_VAR_resource_group: '$(resourceGroup)'
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

  # Execute Terraform Plan Task
  - task: TerraformTaskV1@0
    displayName: 'Terraform Plan'
    inputs:
      command: 'plan'
      provider: 'azurerm'
      environmentServiceNameAzureRM: '$(azureServiceConnection)'
      workingDirectory: '${{ parameters.workingDirectory }}'
    env:
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
      TF_VAR_location: '$(location)'
      TF_VAR_resource_group: '$(resourceGroup)'
    enabled: true

  # Apply Terraform Configuration
  - task: TerraformTaskV1@0
    displayName: 'Terraform Apply'
    condition: eq(variables['build.sourceBranch'], 'refs/heads/master') # will only run in master
    inputs:
      command: apply
      provider: 'azurerm'
      environmentServiceNameAzureRM: '$(azureServiceConnection)'
      workingDirectory: '${{ parameters.workingDirectory }}'
    env:
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
      TF_VAR_location: '$(location)'
      TF_VAR_resource_group: '$(resourceGroup)'
    enabled: true
  